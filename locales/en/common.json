{
  "nav": {
    "home": "Home",
    "docs": "Documentation",
    "examples": "Examples",
    "download": "Download",
    "blog": "Blog",
    "about": "About"
  },
  "home": {
    "hero": {
      "title": "Cardity",
      "subtitle": "A static type programming language designed for developing smart protocols on Dogecoin UTXO",
      "description": "Build powerful smart protocols with a modern, type-safe programming language that runs directly on the Dogecoin blockchain.",
      "getStarted": "Get Started",
      "readDocs": "Read the docs",
      "downloadTools": "Download Tools",
      "latestVersion": "Latest Version"
    },
    "features": {
      "title": "Why Cardity?",
      "subtitle": "Modern smart protocol development with type safety and developer experience",
      "compiler": {
        "title": "Type Safe",
        "description": "Static type checking prevents runtime errors and improves code quality"
      },
      "packageManager": {
        "title": "Developer Friendly",
        "description": "Familiar syntax with modern development tools and debugging support"
      },
      "drc20": {
        "title": "Dogecoin Native",
        "description": "Built specifically for Dogecoin UTXO model with optimized performance"
      }
    },
    "installation": {
      "title": "Quick Installation",
      "subtitle": "Get started with Cardity in minutes",
      "npmInstall": {
        "title": "npm Installation (Recommended)",
        "description": "Install Cardity via npm or build from source. Full development environment setup included."
      },
      "sourceCode": {
        "title": "From Source Code",
        "description": "Clone source code from GitHub repository, suitable for developers to customize compilation and contribute code"
      }
    },
    "quickStart": {
      "title": "Create Your First Project",
      "subtitle": "Create and deploy your first smart protocol in minutes"
    },
    "cta": {
      "title": "Start Building Dogecoin Smart Protocols",
      "subtitle": "Join the Cardity community and explore unlimited possibilities of UTXO smart protocols",
      "readDocs": "Read Documentation",
      "viewExamples": "View Examples",
      "learnMore": "Learn More"
    }
  },
  "docs": {
    "title": "Documentation",
    "subtitle": "Complete guide to Cardity smart protocol development",
    "learningPath": {
      "title": "Learning Path",
      "description": "If you are a new user, we recommend learning in the following order:",
      "steps": [
        "Install CLI tools and configure environment",
        "Learn basic language syntax and concepts",
        "Write and test your first contract",
        "Understand standard library usage",
        "Deploy contracts to Dogecoin network"
      ]
    },
    "gettingStarted": {
      "title": "Getting Started",
      "subtitle": "Install Cardity CLI and write your first smart protocol in minutes",
      "installation": {
        "title": "Installation",
        "npmInstall": {
          "title": "npm Installation (Recommended)",
          "description": "If installation is successful, you should see output like"
        },
        "sourceCode": "From Source Code"
      },
      "cliCommands": {
        "title": "CLI Commands",
        "projectInit": {
          "title": "Project Initialization",
          "description": "Create new Cardity project with basic file structure"
        },
        "compile": {
          "title": "Compile Protocol",
          "description": "Compile Cardity protocol files to executable format"
        },
        "run": {
          "title": "Run Protocol",
          "description": "Execute compiled protocol files"
        },
        "generateAbi": {
          "title": "Generate ABI",
          "description": "Automatically generate protocol application binary interface"
        },
        "drc20": {
          "title": "DRC-20 Token Operations",
          "description": "Specifically for compiling DRC-20 token protocols"
        },
        "deploy": {
          "title": "Deploy DRC-20 Token",
          "description": "Deploy DRC-20 tokens to Dogecoin network"
        },
        "mint": {
          "title": "Mint Tokens",
          "description": "Mint specified amount of DRC-20 tokens"
        },
        "transfer": {
          "title": "Transfer Tokens",
          "description": "Transfer DRC-20 tokens to specified address"
        },
        "validate": {
          "title": "Validate Protocol",
          "description": "Validate compiled protocol file format and content"
        },
        "info": {
          "title": "View Protocol Info",
          "description": "Display detailed protocol information including version, methods, etc."
        },
        "deployChain": {
          "title": "Deploy to Dogecoin",
          "description": "Deploy protocol to Dogecoin blockchain network"
        },
        "inscription": {
          "title": "Create Inscription Transaction",
          "description": "Create inscription transaction using ordinals protocol"
        }
      },
      "languageFeatures": {
        "title": "Language Features",
        "protocol": {
          "title": "Protocol Definition",
          "description": "Cardity uses protocol keyword to define smart protocols",
          "feature": "Similar to Solidity syntax"
        },
        "state": {
          "title": "State Management",
          "description": "Use state block to define state variables",
          "feature": "Persistent storage"
        },
        "events": {
          "title": "Event System",
          "description": "Use event and emit to handle events",
          "feature": "Event-driven architecture"
        },
        "drc20": {
          "title": "DRC-20 Support",
          "description": "Built-in complete DRC-20 token standard support",
          "feature": "Token standard compatibility"
        }
      },
      "nextSteps": {
        "title": "Next Steps",
        "description": "Now that you understand Cardity's syntax, you can:",
        "learnStandardLibrary": "Learn about the standard library",
        "understandCliTools": "Understand CLI tools usage",
        "viewMoreExamples": "View more code examples",
        "cliReference": {
          "title": "CLI Reference",
          "description": "Learn all available CLI commands and options"
        },
        "examples": {
          "title": "Examples",
          "description": "Explore real-world smart protocol examples"
        },
        "deploy": {
          "title": "Deploy",
          "description": "Deploy your protocols to Dogecoin blockchain"
        }
      },
      "installation": {
        "title": "Installation",
        "npmInstall": {
          "title": "npm Installation (Recommended)",
          "description": "If installation is successful, you should see output like",
          "successOutput": "cardity 1.0.1",
          "outputText": "output"
        },
        "sourceCode": {
          "title": "From Source Code",
          "description": "Clone source code from GitHub repository, suitable for developers to customize compilation and contribute code"
        }
      },
      "firstContract": {
        "title": "Your First Protocol",
        "subtitle": "Create a simple Hello World protocol to get familiar with Cardity's syntax",
        "createFile": "Create Protocol File",
        "createFileDescription": "Create a file named",
        "compileRun": "Compile and Run"
      },
      "languageFeatures": {
        "title": "Language Features",
        "protocol": {
          "title": "Protocol Definition",
          "description": "Cardity uses protocol keyword to define smart protocols",
          "feature": "Similar to Solidity syntax"
        },
        "state": {
          "title": "State Management",
          "description": "Use state block to define state variables",
          "feature": "Persistent storage"
        },
        "events": {
          "title": "Event System",
          "description": "Use event and emit to handle events",
          "feature": "Event-driven architecture"
        },
        "drc20": {
          "title": "DRC-20 Support",
          "description": "Built-in complete DRC-20 token standard support",
          "feature": "Token standard compatibility"
        }
      }
    },
    "cli": {
      "title": "CLI Reference",
      "subtitle": "Complete command-line interface reference for Cardity development tools",
      "installation": {
        "title": "Installation",
        "npmInstall": {
          "title": "npm Installation (Recommended)",
          "currentVersion": "Current Version",
          "colon": ":",
          "code": {
            "globalInstall": "# Global installation of Cardity",
            "verifyInstall": "# Verify installation",
            "viewHelp": "# View help"
          }
        }
      },
      "basicCommands": {
        "title": "Basic Commands",
        "projectInit": {
          "title": "Project Initialization",
          "description": "Create new Cardity project with basic file structure",
          "code": {
            "initProject": "# Initialize new project",
            "example": "# Example"
          }
        },
        "compile": {
          "title": "Compile Protocol",
          "description": "Compile Cardity protocol files to executable format"
        },
        "run": {
          "title": "Run Protocol",
          "description": "Execute compiled protocol files"
        },
        "generateAbi": {
          "title": "Generate ABI",
          "description": "Automatically generate protocol application binary interface"
        }
      },
      "drc20Commands": {
        "title": "DRC-20 Token Commands",
        "compile": {
          "title": "Compile DRC-20 Token",
          "description": "Specifically for compiling DRC-20 token protocols"
        },
        "deploy": {
          "title": "Deploy DRC-20 Token",
          "description": "Deploy DRC-20 tokens to Dogecoin network"
        },
        "mint": {
          "title": "Mint Tokens",
          "description": "Mint specified amount of DRC-20 tokens"
        },
        "transfer": {
          "title": "Transfer Tokens",
          "description": "Transfer DRC-20 tokens to specified address"
        }
      },
      "deploymentCommands": {
        "title": "Deployment Commands",
        "validate": {
          "title": "Validate Protocol",
          "description": "Validate compiled protocol file format and content"
        },
        "info": {
          "title": "View Protocol Info",
          "description": "Display detailed protocol information including version, methods, etc."
        },
        "deploy": {
          "title": "Deploy to Dogecoin",
          "description": "Deploy protocol to Dogecoin blockchain network"
        },
        "inscription": {
          "title": "Create Inscription Transaction",
          "description": "Create inscription transaction using ordinals protocol"
        }
      },
      "advancedCommands": {
        "title": "Advanced Commands",
        "compiler": {
          "title": "Compiler Tools",
          "description": "Advanced compiler options and format conversion"
        },
        "abiGenerator": {
          "title": "ABI Generator",
          "description": "Independent ABI generation tool"
        },
        "runtime": {
          "title": "Runtime Tools",
          "description": "Independent runtime execution tool"
        },
        "packageManager": {
          "title": "Package Management",
          "description": "Manage dependency packages and publish packages"
        }
      },
      "help": {
        "title": "Help and Support",
        "getHelp": {
          "title": "Get Help",
          "description": "View all commands and specific command help"
        },
        "version": {
          "title": "Version Information",
          "description": "View version and detailed information"
        },
        "needHelp": "Need more help? Check our documentation and examples",
        "quickStart": "Quick Start",
        "viewExamples": "View Examples",
        "deployGuide": "Deploy Guide"
      }
    },
    "deploy": {
      "title": "Deployment Guide",
      "subtitle": "Learn how to deploy your Cardity smart protocols to Dogecoin blockchain",
      "overview": {
        "title": "Deployment Overview",
        "description": "Cardity supports deploying smart protocols to the Dogecoin blockchain using UTXO-based storage. Your protocols are compiled to binary format and stored in OP_RETURN outputs or as inscriptions."
      },
      "methods": {
        "title": "Deployment Methods",
        "opReturn": {
          "title": "UTXO Storage",
          "description": "Protocols are stored in Dogecoin UTXO outputs for permanent on-chain storage"
        },
        "inscription": {
          "title": "Binary Format",
          "description": ".carc files contain optimized binary data for efficient blockchain storage"
        }
      },
      "steps": {
        "title": "Deployment Steps",
        "compile": {
          "title": "Compilation Process",
          "description": "Compile your .car file to .carc format"
        },
        "validate": {
          "title": "Pre-deployment Validation",
          "description": "Validate the compiled protocol"
        },
        "deploy": {
          "title": "DRC-20 Token Deployment",
          "description": "Deploy to Dogecoin blockchain"
        }
      },
      "code": {
        "compileCommands": {
          "title": "Compilation Commands",
          "compileToBinary": "# Compile .car file to .carc binary format",
          "compileWithOptimization": "# Compile with optimization",
          "compileWithOutput": "# Compile with specific output",
          "validateCompilation": "# Validate compilation"
        },
        "binaryStructure": {
          "title": "Binary File Structure",
          "description": ".carc file contains:",
          "protocolMetadata": "// - Protocol metadata (name, version, owner)",
          "stateVariables": "// - State variable definitions",
          "methodBytecode": "// - Method bytecode",
          "eventDefinitions": "// - Event definitions",
          "abiInformation": "// - ABI information"
        },
        "deploymentCommands": {
          "title": "Deployment Commands",
          "validateFile": "# Validate .carc file",
          "viewInfo": "# View protocol info",
          "deployToChain": "# Deploy to Dogecoin chain",
          "createInscription": "# Create inscription transaction",
          "viewProtocolInfo": "# View protocol information",
          "checkDeploymentStatus": "# Check deployment status",
          "validateWithVerbose": "# Validate with detailed output",
          "deployWithCustomFee": "# Deploy with custom fee",
          "deployToTestnet": "# Deploy to testnet",
          "deployWithMetadata": "# Deploy with metadata",
          "createInscriptionWithMetadata": "# Create inscription with metadata",
          "viewInscriptionDetails": "# View inscription details",
          "deployInscription": "# Deploy inscription"
        },
        "validationChecks": {
          "title": "Validation Checks",
          "protocolStructure": "• Protocol structure validation",
          "stateVariableType": "• State variable type checking",
          "methodSyntax": "• Method syntax verification",
          "eventDefinition": "• Event definition validation",
          "abiGeneration": "• ABI generation verification",
          "sizeOptimization": "• Size and optimization checks"
        },
        "drc20Deployment": {
          "title": "DRC-20 Token Deployment",
          "createTokenDefinition": "# 1. Create DRC-20 token definition",
          "compileToken": "# 2. Compile token",
          "deployToken": "# 3. Deploy token",
          "mintInitialSupply": "# 4. Mint initial supply"
        }
      },
      "nextSteps": {
        "title": "Next Steps",
        "description": "Now that you understand deployment, you can:",
        "learnAdvancedTechniques": "Learn advanced development techniques",
        "exploreTestingDebugging": "Explore testing and debugging strategies",
        "contributeEcosystem": "Contribute to the Cardity ecosystem"
      },
      "troubleshooting": {
        "title": "Troubleshooting",
        "commonIssues": "Common Issues",
        "compilationErrors": "Compilation Errors",
        "deploymentFailures": "Deployment Failures",
        "documentation": "Documentation",
        "documentAllMethods": "• Document all public methods",
        "provideUsageExamples": "• Provide usage examples",
        "includeDeploymentInstructions": "• Include deployment instructions",
        "maintainChangelog": "• Maintain changelog",
        "createUserGuides": "• Create user guides"
      }
    },
    "reference": {
      "title": "Language Reference",
      "subtitle": "Complete Cardity language syntax and features reference",
      "syntax": {
        "title": "Protocol Structure",
        "description": "Protocol is the basic unit of Cardity contracts, similar to Solidity's Contract:"
      },
      "types": {
        "title": "State Variables",
        "description": "State variables are stored in UTXO and support the following data types:",
        "basicTypes": {
          "title": "Basic Types",
          "string": "String type",
          "int": "Integer type",
          "bool": "Boolean type",
          "number": "Number type"
        },
        "complexTypes": {
          "title": "Complex Types",
          "array": "Array type",
          "map": "Mapping type",
          "struct": "Structure type"
        }
      },
      "functions": {
        "title": "Methods",
        "description": "Methods are executable functions that can modify state, return values, or trigger events:",
        "basicMethods": {
          "title": "Basic Methods",
          "description": "Basic method examples"
        },
        "methodsWithReturn": {
          "title": "Methods with Return Values",
          "description": "Methods that return values"
        },
        "methodsWithParams": {
          "title": "Methods with Parameters",
          "description": "Methods that accept parameters"
        },
        "controlStructures": {
          "title": "Control Structures",
          "conditionalStatements": {
            "title": "Conditional Statements",
            "description": "Conditional statements examples"
          },
          "loops": {
            "title": "Loops",
            "description": "Loop examples"
          }
        },
        "builtInFunctions": {
          "title": "Built-in Functions",
          "description": "Cardity provides built-in functions for common operations:",
          "commonFunctions": {
            "title": "Common Functions",
            "now": "Current timestamp",
            "length": "String/array length",
            "push": "Add to array",
            "pop": "Remove from array"
          },
          "usageExamples": {
            "title": "Usage Examples",
            "description": "Example usage of built-in functions"
          }
        },
        "errorHandling": {
          "title": "Error Handling",
          "description": "Use return statements for condition checking and error handling:"
        },
        "abiGeneration": {
          "title": "ABI Generation",
          "description": "Cardity automatically generates ABI (Application Binary Interface) from your protocol:",
          "generateAbi": {
            "title": "Generate ABI",
            "description": "Generate ABI from .car file"
          },
          "generatedAbiExample": {
            "title": "Generated ABI Example",
            "description": "Example of generated ABI"
          },
          "cardityTest": {
            "title": "@cardity/test",
            "description": "Testing framework for Cardity protocols with assertion and mocking capabilities.",
            "features": {
              "title": "Features:",
              "unitTesting": "Unit testing framework",
              "assertionFunctions": "Assertion functions",
              "mockStateEvents": "Mock state and events",
              "testCoverage": "Test coverage reporting",
              "integrationTesting": "Integration testing helpers"
            }
          }
        }
      },
      "nextSteps": {
        "title": "Next Steps",
        "description": "Now that you understand the standard library, you can:",
        "learnDeployment": "Learn about deployment strategies",
        "exploreAdvancedTechniques": "Explore advanced development techniques",
        "createPublishPackages": "Create and publish your own packages"
      },
      "usage": {
        "importAndUse": "Import and Use",
        "drc20WithStandardLibrary": "DRC-20 with Standard Library",
        "registryFeatures": "Registry Features",
        "registryCommands": "Registry Commands",
        "centralizedDiscovery": "Centralized package discovery",
        "versionManagement": "Version management and semantic versioning",
        "dependencyResolution": "Dependency resolution",
        "packageDocumentation": "Package documentation and examples",
        "communityRatings": "Community ratings and reviews",
        "securityScanning": "Security scanning and validation"
      }
    },
    "standardLibrary": {
      "title": "Standard Library",
      "subtitle": "Built-in functions and utilities for Cardity development",
      "overview": {
        "title": "Package Management",
        "description": "Cardity provides a comprehensive package management system for sharing and reusing code:",
        "packageConfiguration": {
          "title": "Package Configuration",
          "description": "Configure your package with metadata and dependencies"
        },
        "packageInstallation": {
          "title": "Package Installation",
          "description": "Install packages from the registry"
        },
        "packagePublishing": {
          "title": "Package Publishing",
          "description": "Publish your packages to the registry"
        },
        "packageCommands": {
          "title": "Package Commands",
          "description": "Common package management commands"
        },
        "standardPackages": {
          "title": "Standard Packages",
          "description": "Available standard packages",
          "cardityStandard": {
            "title": "@cardity/standard",
            "description": "Core standard library providing essential utilities and data structures for Cardity development.",
            "features": {
              "title": "Features:",
              "dataStructures": "Data structures (Array, Map, Set)",
              "stringManipulation": "String manipulation utilities",
              "mathOperations": "Math and number operations",
              "timeFunctions": "Time and date functions",
              "validationHelpers": "Validation helpers"
            }
          },
          "cardityUtils": {
            "title": "@cardity/utils",
            "description": "Utility functions for common development tasks and helper methods.",
            "features": {
              "title": "Features:",
              "addressValidation": "Address validation and formatting",
              "hashEncryption": "Hash and encryption utilities",
              "jsonManipulation": "JSON parsing and manipulation",
              "errorHandling": "Error handling helpers",
              "loggingDebugging": "Logging and debugging tools"
            }
          },
          "cardityDrc20": {
            "title": "@cardity/drc20",
            "description": "Complete DRC-20 token standard implementation with deployment and management tools.",
            "features": {
              "title": "Features:",
              "tokenTemplates": "DRC-20 token templates",
              "deploymentUtilities": "Token deployment utilities",
              "mintTransfer": "Mint and transfer operations",
              "tokenValidation": "Token validation helpers",
              "eventEmission": "Event emission for tokens"
            }
          },
          "cardityTest": {
            "title": "@cardity/test",
            "description": "Testing framework for Cardity protocols with assertion and mocking capabilities.",
            "features": {
              "title": "Features:",
              "unitTesting": "Unit testing framework",
              "assertionFunctions": "Assertion functions",
              "mockStateEvents": "Mock state and events",
              "testCoverage": "Test coverage reporting",
              "integrationTesting": "Integration testing helpers"
            }
          }
        }
      },
      "usage": {
        "importAndUse": "Import and Use",
        "drc20WithStandardLibrary": "DRC-20 with Standard Library",
        "registryFeatures": "Registry Features",
        "registryCommands": "Registry Commands",
        "centralizedDiscovery": "Centralized package discovery",
        "versionManagement": "Version management and semantic versioning",
        "dependencyResolution": "Dependency resolution",
        "packageDocumentation": "Package documentation and examples",
        "communityRatings": "Community ratings and reviews",
        "securityScanning": "Security scanning and validation",
        "code": {
          "importStandardLibrary": "// Import standard library functions",
          "useBuiltInFunctions": "// Use built-in functions",
          "usingDrc20Library": "// Using DRC-20 standard library",
          "drc20Configuration": "// DRC-20 configuration",
          "registryCommands": "// Registry commands",
          "searchPackages": "// Search packages",
          "installPackage": "// Install package",
          "publishPackage": "// Publish package",
          "viewPackageInfo": "// View package info"
        }
      },
      "nextSteps": {
        "title": "Next Steps",
        "description": "Now that you understand the standard library, you can:",
        "learnDeployment": "Learn about deployment strategies",
        "exploreAdvancedTechniques": "Explore advanced development techniques",
        "createPublishPackages": "Create and publish your own packages"
      },
      "functions": {
        "title": "Built-in Functions",
        "description": "Available standard library functions",
        "timeFunctions": {
          "title": "Time Functions",
          "now": "Current timestamp",
          "time": "Current time in seconds",
          "date": "Current date string"
        },
        "arrayFunctions": {
          "title": "Array Functions",
          "length": "Get array length",
          "push": "Add element to array",
          "pop": "Remove last element",
          "splice": "Remove elements"
        },
        "stringFunctions": {
          "title": "String Functions",
          "length": "String length",
          "substring": "Extract substring",
          "toLowerCase": "Convert to lowercase",
          "toUpperCase": "Convert to uppercase"
        },
        "mathFunctions": {
          "title": "Math Functions",
          "abs": "Absolute value",
          "min": "Minimum value",
          "max": "Maximum value",
          "sqrt": "Square root"
        }
      }
    },
    "developerGuide": {
      "title": "Developer Guide",
      "subtitle": "Advanced development techniques and best practices",
      "overview": {
        "title": "Development Environment",
        "description": "Advanced development techniques and patterns",
        "systemRequirements": {
          "title": "System Requirements",
          "operatingSystem": "Operating System",
          "memory": "Memory",
          "storage": "Storage",
          "network": "Network",
          "osValue": "macOS, Linux, or Windows",
          "memoryValue": "4GB RAM minimum, 8GB recommended",
          "storageValue": "2GB free space",
          "networkValue": "Internet connection for package downloads"
        },
        "requiredDependencies": {
          "title": "Required Dependencies",
          "description": "Install required system dependencies"
        },
        "buildFromSource": {
          "title": "Build from Source",
          "description": "Build Cardity from source code"
        },
        "projectStructure": {
          "title": "Project Structure",
          "description": "Understanding the Cardity core architecture",
          "cardityCoreArchitecture": {
            "title": "Cardity Core Architecture",
            "description": "Overview of the core codebase structure"
          }
        }
      },
      "bestPractices": {
        "title": "Performance Optimization",
        "description": "Recommended development practices",
        "protocolOptimization": {
          "title": "Protocol Optimization",
          "minimizeStateVariables": "Minimize State Variables",
          "efficientDataStructures": "Efficient Data Structures",
          "optimizeMethods": "Optimize Methods",
          "batchOperations": "Batch Operations",
          "lazyLoading": "Lazy Loading",
          "minimizeStateVariablesDesc": "Only store essential data",
          "efficientDataStructuresDesc": "Use appropriate types for your use case",
          "optimizeMethodsDesc": "Reduce computational complexity",
          "batchOperationsDesc": "Group related operations together",
          "lazyLoadingDesc": "Initialize data only when needed"
        },
        "compilationOptimization": {
          "title": "Compilation Optimization",
          "description": "Optimize compilation settings"
        },
        "packageDevelopment": {
          "title": "Package Development",
          "description": "Package development and management",
          "creatingPackages": {
            "title": "Creating Packages",
            "description": "Create and structure packages"
          },
          "packageConfiguration": {
            "title": "Package Configuration",
            "description": "Configure package metadata and dependencies"
          }
        },
        "errorHandling": {
          "title": "Error Handling",
          "description": "Common error patterns and solutions",
          "syntaxErrors": "Syntax Errors",
          "typeErrors": "Type Errors",
          "stateAccessErrors": "State Access Errors",
          "eventEmissionErrors": "Event Emission Errors"
        }
      },
      "testing": {
        "title": "Testing Strategies",
        "description": "Testing strategies and tools"
      },
      "code": {
        "macosInstall": "# macOS (using Homebrew)",
        "ubuntuInstall": "# Ubuntu/Debian",
        "centosInstall": "# CentOS/RHEL",
        "windowsInstall": "# Windows (using vcpkg)",
        "cloneRepository": "# Clone the repository",
        "createBuildDir": "# Create build directory",
        "configureCmake": "# Configure with CMake",
        "buildProject": "# Build the project",
        "installSystem": "# Install to system",
        "verifyInstall": "# Verify installation",
        "projectStructure": "cardity_core/",
        "compilerDir": "├── compiler/             # Compiler source code",
        "lexerFile": "│   ├── lexer.cpp        # Lexical analyzer",
        "parserFile": "│   ├── parser.cpp       # Syntax parser",
        "semanticFile": "│   ├── semantic.cpp     # Semantic analysis",
        "typeSystemFile": "│   ├── type_system.cpp  # Type checking",
        "runtimeFile": "│   ├── runtime.cpp      # Runtime execution",
        "carGeneratorFile": "│   ├── car_generator.cpp # CAR format generator",
        "carcGeneratorFile": "│   ├── carc_generator.cpp # CARC binary generator",
        "carDeployerFile": "│   ├── car_deployer.cpp # Deployment tools",
        "dogecoinDeployerFile": "│   ├── dogecoin_deployer.cpp # Dogecoin integration",
        "drc20StandardFile": "│   ├── drc20_standard.cpp # DRC-20 standard",
        "drc20CompilerFile": "│   ├── drc20_compiler.cpp # DRC-20 compiler",
        "drc20CliFile": "│   ├── drc20_cli.cpp    # DRC-20 CLI tools",
        "eventSystemFile": "│   └── event_system.cpp # Event handling",
        "packageManagerFile": "├── package_manager.cpp   # Package management",
        "packageConfigFile": "├── package_config.cpp    # Configuration management",
        "packageBuilderFile": "├── package_builder.cpp   # Build system",
        "registryClientFile": "├── registry_client.cpp   # Registry integration",
        "cardityCliFile": "├── cardity_cli.cpp      # Main CLI interface",
        "examplesDir": "├── examples/            # Example projects",
        "docsDir": "├── docs/                # Documentation",
        "cmakeListsFile": "└── CMakeLists.txt       # Build configuration",
        "unitTesting": {
          "title": "Unit Testing",
          "runAllTests": "# Run all tests",
          "runSpecificTests": "# Run specific test suites",
          "runWithCoverage": "# Run with coverage",
          "runVerboseTests": "# Run tests with verbose output"
        },
        "protocolTesting": {
          "title": "Protocol Testing",
          "testCompilation": "# Test protocol compilation",
          "testExecution": "# Test protocol execution",
          "testDrc20Token": "# Test DRC-20 token",
          "runIntegrationTests": "# Run integration tests"
        }
      },
      "nextSteps": {
        "title": "Next Steps",
        "description": "Now that you're familiar with advanced development techniques, you can:",
        "contributeCore": "Contribute to the Cardity core project",
        "createPackages": "Create and publish your own packages",
        "buildApplications": "Build complex applications with Cardity"
      },
      "resources": {
        "title": "Resources",
        "documentation": "Documentation",
        "community": "Community",
        "gettingStartedGuide": "Getting Started Guide",
        "languageReference": "Language Reference",
        "standardLibrary": "Standard Library",
        "cliTools": "CLI Tools",
        "deploymentGuide": "Deployment Guide",
        "githubRepository": "GitHub Repository",
        "discordCommunity": "Discord Community",
        "developerForum": "Developer Forum",
        "emailSupport": "Email Support"
      }
    }
  },
  "examples": {
    "title": "Code Examples",
    "subtitle": "Explore Cardity smart protocol examples including Hello World, DRC-20 tokens, wallets, voting systems, and more. Learn from real-world code samples.",
    "hero": {
      "title": "Code Examples",
      "subtitle": "Explore real-world smart protocol examples and learn Cardity programming patterns",
              "description": "From simple Hello World to complex DRC-20 tokens, discover how to build powerful smart protocols"
    },
    "pageTitle": "Cardity Examples",
    "pageSubtitle": "Learn Cardity through practical examples, from basic contracts to advanced DRC-20 tokens and governance systems",
    "categories": {
      "basic": "Basic",
      "token": "Token",
      "wallet": "Wallet",
      "governance": "Governance",
      "advanced": "Advanced"
    },
    "difficulty": {
      "beginner": "Beginner",
      "intermediate": "Intermediate",
      "advanced": "Advanced"
    },
    "examples": {
      "helloWorld": {
        "title": "Hello World",
        "description": "A simple protocol that demonstrates basic Cardity syntax and structure"
      },
      "counter": {
        "title": "Counter Protocol",
        "description": "A simple counter that can be incremented and decremented"
      },
      "drc20Token": {
        "title": "DRC-20 Token",
        "description": "A complete DRC-20 token implementation with mint and transfer functionality"
      },
      "simpleWallet": {
        "title": "Simple Wallet",
        "description": "A basic wallet protocol for managing Dogecoin balances"
      },
      "votingSystem": {
        "title": "Voting System",
        "description": "A decentralized voting system with proposal creation and voting"
      },
      "eventSystemDemo": {
        "title": "Event System Demo",
        "description": "Demonstrates advanced event handling and state management"
      }
    },
    "actions": {
      "viewDetails": "View Details",
      "submitExample": "Submit Example",
      "startCoding": "Start Coding"
    },
    "contribute": {
      "title": "Want to contribute examples?",
      "description": "We welcome community contributions of high-quality example code. Your examples can help other developers better understand and use Cardity."
    },
    "comingSoon": {
      "title": "Examples Coming Soon",
      "description": "We are preparing the latest Cardity code examples, stay tuned!"
    }
  },
  "download": {
    "title": "Download Cardity",
    "subtitle": "Get the latest Cardity tools, examples, and development kits to start building smart protocols on Dogecoin",
    "quickStart": {
      "title": "Quick Start",
      "description": "Choose your platform and get started with Cardity in minutes",
      "downloadFor": "Download for",
      "orInstallVia": "Or install via package manager:",
      "homebrewCommand": "brew install cardity"
    },
    "downloadOptions": {
      "cliTools": {
        "title": "CLI Tools",
        "description": "Complete command-line interface for Cardity development"
      },
      "exampleProjects": {
        "title": "Example Projects",
        "description": "Ready-to-use example projects and templates"
      },
      "developmentKit": {
        "title": "Development Kit",
        "description": "Complete development environment setup"
      }
    },
    "tools": {
      "cardity": {
        "name": "cardity",
        "description": "Main CLI tool for project management",
        "version": "0.1.0",
        "size": "2.1 MB"
      },
      "cardityc": {
        "name": "cardityc",
        "description": "Compiler for .car files",
        "version": "0.1.0",
        "size": "1.8 MB"
      },
      "cardityRuntime": {
        "name": "cardity_runtime",
        "description": "Runtime execution engine",
        "version": "0.1.0",
        "size": "2.3 MB"
      },
      "cardityDrc20": {
        "name": "cardity_drc20",
        "description": "DRC-20 token management tools",
        "version": "0.1.0",
        "size": "1.5 MB"
      },
      "cardityAbi": {
        "name": "cardity_abi",
        "description": "ABI generator",
        "version": "0.1.0",
        "size": "1.2 MB"
      },
      "cardityDeploy": {
        "name": "cardity_deploy",
        "description": "Deployment tools",
        "version": "0.1.0",
        "size": "2.0 MB"
      }
    },
    "examples": {
      "helloWorld": {
        "name": "Hello World",
        "description": "Simple Hello World protocol",
        "version": "1.0.0",
        "size": "2 KB"
      },
      "counterProtocol": {
        "name": "Counter Protocol",
        "description": "Basic counter with increment/decrement",
        "version": "1.0.0",
        "size": "3 KB"
      },
      "walletProtocol": {
        "name": "Wallet Protocol",
        "description": "Simple wallet with deposit/withdraw",
        "version": "1.0.0",
        "size": "5 KB"
      },
      "drc20Token": {
        "name": "DRC-20 Token",
        "description": "Complete DRC-20 token implementation",
        "version": "1.0.0",
        "size": "8 KB"
      },
      "eventDemo": {
        "name": "Event Demo",
        "description": "Event system demonstration",
        "version": "1.0.0",
        "size": "4 KB"
      },
      "votingSystem": {
        "name": "Voting System",
        "description": "Decentralized voting protocol",
        "version": "1.0.0",
        "size": "6 KB"
      }
    },
    "devKit": {
      "cardityDevKit": {
        "name": "Cardity Dev Kit",
        "description": "Complete development toolkit",
        "version": "0.1.0",
        "size": "15 MB"
      },
      "vsCodeExtension": {
        "name": "VS Code Extension",
        "description": "Cardity language support for VS Code",
        "version": "0.1.0",
        "size": "500 KB"
      },
      "projectTemplates": {
        "name": "Project Templates",
        "description": "Starter project templates",
        "version": "1.0.0",
        "size": "2 MB"
      }
    },
    "platforms": {
      "macOS": "macOS",
      "linux": "Linux",
      "windows": "Windows",
      "architecturesLabel": "Architectures:",
      "packageManagersLabel": "Package Managers:",
      "download": "Download",
      "architectures": {
        "intelX64": "Intel x64",
        "appleSilicon": "Apple Silicon",
        "x64": "x64",
        "arm64": "ARM64"
      },
      "packageManagers": {
        "homebrew": "Homebrew",
        "apt": "APT",
        "yum": "YUM",
        "chocolatey": "Chocolatey",
        "directDownload": "Direct Download"
      },
      "allPlatforms": "All Platforms",
      "sourceCode": "Source Code",
      "vsCode": "VS Code"
    },
    "installation": {
      "title": "Installation Instructions",
      "fromSource": {
        "title": "From Source",
        "commands": "# Clone the repository\ngit clone https://github.com/cardity-org/cardity-core.git\ncd cardity-core\n\n# Install dependencies\nbrew install cmake nlohmann-json curl libarchive openssl\n\n# Build and install\nmkdir build && cd build\ncmake ..\nmake -j4\nsudo make install\n\n# Verify installation\ncardity --version"
      },
      "usingPackageManager": {
        "title": "Using Package Manager",
        "commands": "# macOS (Homebrew)\nbrew install cardity\n\n# Ubuntu/Debian\nsudo apt-get install cardity\n\n# Windows (Chocolatey)\nchoco install cardity\n\n# Verify installation\ncardity --version"
      }
    },
    "systemRequirements": {
      "title": "System Requirements",
      "storage": {
        "title": "Storage",
        "description": "Minimum 2GB free space for installation and development"
      },
      "memory": {
        "title": "Memory",
        "description": "4GB RAM minimum, 8GB recommended for development"
      },
      "network": {
        "title": "Network",
        "description": "Internet connection for package downloads and updates"
      }
    },
    "openSource": {
      "title": "Open Source",
      "description": "Cardity is completely open source. View the source code, contribute, or build from source.",
      "viewOnGithub": "View on GitHub",
      "buildFromSource": "Build from Source"
    },
    "support": {
      "title": "Need Help?",
      "description": "Having trouble with installation or setup? We're here to help.",
      "documentation": {
        "title": "Documentation",
        "description": "Comprehensive guides and tutorials"
      },
      "reportIssues": {
        "title": "Report Issues",
        "description": "Found a bug? Report it on GitHub"
      },
      "contactUs": {
        "title": "Contact Us",
        "description": "Get in touch for support"
      }
    },
    "common": {
      "version": "Version:",
      "size": "Size:",
      "platform": "Platform:",
      "download": "Download"
    }
  },
  "about": {
    "title": "About Cardity",
    "subtitle": "Cardity Core - Complete smart protocol programming language implementation designed for Dogecoin UTXO",
    "overview": {
      "title": "Project Overview",
      "description": "Cardity Core is the complete implementation of the Cardity programming language, providing:",
      "features": [
        "Compiler - Compile programming language format .car files to executable format",
        "Runtime - Execute compiled protocols",
        "Package Manager - Manage dependencies and publish packages",
        "CLI Tools - Command line development tools",
        "Type System - Static type checking",
        "Event System - Event-driven architecture",
        "ABI Generator - Automatically generate protocol interfaces (support programming language format and JSON format)",
        "Blockchain Deployment - Support Dogecoin chain deployment",
        "DRC-20 Token Standard - Complete DRC-20 token support"
      ]
    },
    "version": {
      "title": "Version Information",
      "npmPackage": {
        "title": "npm Package Information",
        "packageName": "Package Name",
        "currentVersion": "Current Version",
        "license": "License",
        "packageSize": "Package Size",
        "fileCount": "File Count"
      },
      "github": {
        "title": "GitHub Repository",
        "repository": "Repository",
        "homepage": "Homepage",
        "npmPage": "npm Page"
      }
    },
    "features": {
      "title": "Core Features",
      "languageFormat": {
        "title": "Programming Language Format",
        "description": "Cardity supports programming language format .car files with Solidity-like syntax, including:",
        "items": [
          "Protocol definition (protocol)",
          "State variables (state)",
          "Event system (event)",
          "Method definition (method)",
          "Type system (string, int, bool)",
          "Event emission (emit)"
        ]
      },
      "drc20": {
        "title": "DRC-20 Token Standard",
        "description": "Complete DRC-20 token standard support, including:",
        "items": [
          "Token definition (drc20 block)",
          "Deploy method (deploy)",
          "Mint method (mint)",
          "Transfer method (transfer)",
          "Event definitions (TokenDeployed, TokenMinted, TokenTransferred)",
          "Automatic ABI generation"
        ]
      },
      "blockchain": {
        "title": "Blockchain Deployment",
        "description": "Support multiple deployment methods:",
        "items": [
          ".carc binary format",
          "OP_RETURN deployment",
          "Inscription deployment (ordinals protocol)",
          "Dogecoin chain deployment",
          "Protocol validation and viewing"
        ]
      },
      "devTools": {
        "title": "Development Tools",
        "description": "Complete development toolchain:",
        "items": [
          "CLI command line tools",
          "Project initialization",
          "Compilation and running",
          "ABI generation",
          "Package management",
          "Debugging and testing"
        ]
      }
    },
    "installation": {
      "title": "Installation Methods",
      "npm": {
        "title": "npm Installation (Recommended)",
        "description": "One-click installation via npm package manager, support global use, automatic dependency management"
      },
      "sourceCode": {
        "title": "From Source Code",
        "description": "Clone source code from GitHub repository, suitable for developers to customize compilation and contribute code"
      }
    },
    "community": {
      "title": "Community and Links",
      "official": {
        "title": "Official Resources",
        "github": "GitHub Repository",
        "npm": "npm Package Page",
        "docs": "Official Documentation",
        "examples": "Example Projects"
      },
      "devResources": {
        "title": "Development Resources",
        "quickStart": "Quick Start",
        "cliReference": "CLI Reference",
        "deployGuide": "Deploy Guide",
        "downloadTools": "Download Tools"
      }
    },
    "contributing": {
      "title": "Contributing Code",
      "description": "Welcome to contribute code! Cardity is an open source project, we welcome all forms of contributions:",
      "steps": [
        "Fork project and create feature branch",
        "Submit your changes",
        "Push to branch and create Pull Request",
        "Report bugs and suggest features"
      ],
      "viewGitHub": "View GitHub",
      "devGuide": "Development Guide"
    }
  },
  "footer": {
    "description": "Cardity is a static type programming language designed for developing smart protocols on Dogecoin UTXO",
    "links": {
      "docs": "Documentation",
      "examples": "Examples",
      "download": "Download",
      "about": "About",
      "blog": "Blog"
    },
    "docs": {
      "gettingStarted": "Getting Started",
      "cliReference": "CLI Reference",
      "deployment": "Deployment"
    },
    "examples": {
      "smartProtocols": "Smart Protocols",
      "downloadExamples": "Download Examples"
    },
    "community": {
      "title": "Community",
      "github": "GitHub",
      "twitter": "X",
      "discord": "Discord"
    },
    "legal": {
      "title": "Legal",
      "privacy": "Privacy Policy",
      "terms": "Terms of Service",
      "license": "MIT License"
    },
    "copyright": "© 2024 Cardity. All rights reserved."
  }
} 