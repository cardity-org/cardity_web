{
  "nav": {
    "home": "首页",
    "docs": "文档",
    "examples": "示例",
    "download": "下载",
    "blog": "博客",
    "about": "关于"
  },
  "home": {
    "hero": {
      "title": "Cardity",
      "subtitle": "专为在 Dogecoin UTXO 上开发智能协议而设计的静态类型编程语言",
      "description": "使用现代、类型安全的编程语言构建强大的智能协议，直接在 Dogecoin 区块链上运行。",
      "getStarted": "开始使用",
      "readDocs": "查看文档",
      "downloadTools": "下载工具",
      "latestVersion": "最新版本"
    },
    "features": {
      "title": "为什么选择 Cardity？",
      "subtitle": "具有类型安全性和开发者体验的现代智能协议开发",
      "compiler": {
        "title": "类型安全",
        "description": "静态类型检查防止运行时错误并提高代码质量"
      },
      "packageManager": {
        "title": "开发者友好",
        "description": "熟悉的语法，现代化的开发工具和调试支持"
      },
      "drc20": {
        "title": "Dogecoin 原生",
        "description": "专为 Dogecoin UTXO 模型构建，性能优化"
      }
    },
    "installation": {
      "title": "快速安装",
      "subtitle": "几分钟内开始使用 Cardity",
      "npmInstall": {
        "title": "npm 安装（推荐）",
        "description": "通过 npm 安装 Cardity 或从源码构建。包含完整的开发环境设置。"
      },
      "sourceCode": {
        "title": "从源码安装",
        "description": "从 GitHub 仓库克隆源码，适合开发者自定义编译和贡献代码"
      }
    },
    "quickStart": {
      "title": "创建第一个项目",
      "subtitle": "几分钟内创建并部署你的第一个智能协议"
    },
    "cta": {
      "title": "开始构建 Dogecoin 智能协议",
      "subtitle": "加入 Cardity 社区，探索 UTXO 智能协议的无限可能",
      "readDocs": "阅读文档",
      "viewExamples": "查看示例",
      "learnMore": "了解更多"
    }
  },
  "docs": {
    "title": "文档",
    "subtitle": "Cardity 智能协议开发完整指南",
    "gettingStarted": {
      "title": "快速开始",
      "subtitle": "安装 Cardity CLI 并在几分钟内编写您的第一个智能协议",
      "installation": {
        "title": "安装",
        "npmInstall": {
          "title": "npm 安装（推荐）",
          "description": "如果安装成功，您应该看到类似以下的输出",
          "successOutput": "cardity@1.0.0",
          "outputText": "表示安装成功"
        },
        "sourceCode": {
          "title": "从源代码安装"
        }
      },
      "firstContract": {
        "title": "您的第一个协议",
        "subtitle": "创建一个简单的 Hello World 协议来了解 Cardity 的基本语法",
        "createFile": "创建协议文件",
        "createFileDescription": "创建一个名为",
        "compileRun": "编译和运行"
      },
      "cliCommands": {
        "title": "CLI 命令",
        "projectInit": {
          "title": "项目初始化",
          "description": "创建具有基本文件结构的新 Cardity 项目"
        },
        "compile": {
          "title": "编译协议",
          "description": "将 Cardity 协议文件编译为可执行格式"
        },
        "run": {
          "title": "运行协议",
          "description": "执行编译后的协议文件"
        },
        "generateAbi": {
          "title": "生成 ABI",
          "description": "自动生成协议应用程序二进制接口"
        },
        "drc20": {
          "title": "DRC-20 代币操作",
          "description": "专门用于编译 DRC-20 代币协议"
        },
        "deploy": {
          "title": "部署 DRC-20 代币",
          "description": "将 DRC-20 代币部署到 Dogecoin 网络"
        },
        "mint": {
          "title": "铸造代币",
          "description": "铸造指定数量的 DRC-20 代币"
        },
        "transfer": {
          "title": "转账代币",
          "description": "将 DRC-20 代币转移到指定地址"
        },
        "validate": {
          "title": "验证协议",
          "description": "验证编译后的协议文件格式和内容"
        },
        "info": {
          "title": "查看协议信息",
          "description": "显示详细的协议信息，包括版本、方法等"
        },
        "deployChain": {
          "title": "部署到 Dogecoin",
          "description": "将协议部署到 Dogecoin 区块链网络"
        },
        "inscription": {
          "title": "创建铭文交易",
          "description": "使用 ordinals 协议创建铭文交易"
        }
      },
      "languageFeatures": {
        "title": "语言功能",
        "protocol": {
          "title": "协议定义",
          "description": "Cardity 使用 protocol 关键字定义智能协议",
          "feature": "类似 Solidity 语法"
        },
        "state": {
          "title": "状态管理",
          "description": "使用 state 块定义状态变量",
          "feature": "持久化存储"
        },
        "events": {
          "title": "事件系统",
          "description": "使用 event 和 emit 处理事件",
          "feature": "事件驱动架构"
        },
        "drc20": {
          "title": "DRC-20 支持",
          "description": "内置完整的 DRC-20 代币标准支持",
          "feature": "代币标准兼容性"
        }
      },
      "nextSteps": {
        "title": "下一步",
        "description": "现在您已经了解了 Cardity 的语法，您可以：",
        "learnStandardLibrary": "学习标准库",
        "understandCliTools": "了解 CLI 工具的使用",
        "viewMoreExamples": "查看更多代码示例",
        "cliReference": {
          "title": "CLI 参考",
          "description": "学习所有可用的 CLI 命令和选项"
        },
        "examples": {
          "title": "示例",
          "description": "探索真实世界的智能协议示例"
        },
        "deploy": {
          "title": "部署",
          "description": "将您的协议部署到 Dogecoin 区块链"
        }
      }
    },
    "cli": {
      "title": "CLI 工具",
      "subtitle": "Cardity 命令行工具完整参考",
      "installation": {
        "title": "安装",
        "npmInstall": {
          "title": "npm 安装",
          "currentVersion": "当前版本",
          "colon": "：",
          "code": {
            "globalInstall": "# 全局安装 Cardity",
            "verifyInstall": "# 验证安装",
            "viewHelp": "# 查看帮助"
          }
        }
      },
      "basicCommands": {
        "title": "基本命令",
        "projectInit": {
          "title": "项目初始化",
          "description": "创建新的 Cardity 项目目录结构",
          "code": {
            "initProject": "# 初始化新项目",
            "example": "# 示例"
          }
        },
        "compile": {
          "title": "编译协议",
          "description": "将 .car 文件编译为可执行格式",
          "code": {
            "compileFile": "# 编译 .car 文件",
            "example": "# 示例"
          }
        },
        "run": {
          "title": "运行协议",
          "description": "执行编译后的协议文件",
          "code": {
            "runProtocol": "# 运行编译后的协议",
            "example": "# 示例"
          }
        },
        "generateAbi": {
          "title": "生成 ABI",
          "description": "从协议文件生成应用程序二进制接口",
          "code": {
            "generateInterface": "# 生成协议接口",
            "example": "# 示例"
          }
        }
      },
      "drc20Commands": {
        "title": "DRC-20 命令",
        "compile": {
          "title": "编译 DRC-20",
          "description": "编译 DRC-20 代币协议文件",
          "code": {
            "compileToken": "# 编译 DRC-20 代币",
            "example": "# 示例"
          }
        },
        "deploy": {
          "title": "部署 DRC-20",
          "description": "将 DRC-20 代币部署到网络",
          "code": {
            "deployToken": "# 部署 DRC-20 代币",
            "example": "# 示例"
          }
        },
        "mint": {
          "title": "铸造代币",
          "description": "铸造指定数量的 DRC-20 代币",
          "code": {
            "mintTokens": "# 铸造代币",
            "example": "# 示例"
          }
        },
        "transfer": {
          "title": "转账代币",
          "description": "将 DRC-20 代币转移到指定地址",
          "code": {
            "transferTokens": "# 转账代币",
            "example": "# 示例"
          }
        }
      },
      "deploymentCommands": {
        "title": "部署命令",
        "validate": {
          "title": "验证协议",
          "description": "验证编译后的协议文件格式",
          "code": {
            "validateFile": "# 验证 .carc 文件",
            "example": "# 示例"
          }
        },
        "info": {
          "title": "查看信息",
          "description": "显示协议的详细信息",
          "code": {
            "viewInfo": "# 查看协议信息",
            "example": "# 示例"
          }
        },
        "deploy": {
          "title": "部署协议",
          "description": "将协议部署到 Dogecoin 区块链",
          "code": {
            "deployChain": "# 部署到 Dogecoin 链",
            "example": "# 示例"
          }
        },
        "inscription": {
          "title": "创建铭文",
          "description": "使用 ordinals 协议创建铭文交易",
          "code": {
            "createInscription": "# 创建铭文交易",
            "example": "# 示例"
          }
        }
      },
      "advancedCommands": {
        "title": "高级命令",
        "compiler": {
          "title": "编译器",
          "description": "高级编译选项和格式转换",
          "code": {
            "compileFormats": "# 编译为不同格式",
            "generatePackage": "# 生成部署包"
          }
        },
        "abiGenerator": {
          "title": "ABI 生成器",
          "description": "生成不同格式的 ABI 文件",
          "code": {
            "generateAbi": "# 生成 ABI",
            "outputStdout": "# 输出到标准输出",
            "outputFile": "# 输出到文件",
            "supportedFormats": "# 支持编程语言格式和 JSON 格式"
          }
        },
        "runtime": {
          "title": "运行时",
          "description": "直接运行协议并调用方法",
          "code": {
            "runProtocol": "# 运行协议",
            "methodSupport": "# 支持方法调用和参数传递"
          }
        },
        "packageManager": {
          "title": "包管理器",
          "description": "管理 Cardity 包和依赖",
          "code": {
            "packageCommands": "# 包管理命令"
          }
        }
      },
      "help": {
        "title": "帮助和支持",
        "getHelp": {
          "title": "获取帮助",
          "description": "查看命令帮助信息",
          "code": {
            "viewAllCommands": "# 查看所有命令",
            "viewSpecificHelp": "# 查看特定命令帮助"
          }
        },
        "version": {
          "title": "版本信息",
          "description": "查看 CLI 工具版本",
          "code": {
            "viewVersion": "# 查看版本",
            "viewDetails": "# 查看详细信息"
          }
        },
        "needHelp": "需要更多帮助？",
        "quickStart": "快速开始",
        "viewExamples": "查看示例",
        "deployGuide": "部署指南"
      }
    },
    "reference": {
      "title": "语言参考",
      "subtitle": "完整的 Cardity 语言语法和功能参考",
      "syntax": {
        "title": "协议结构",
        "description": "协议是 Cardity 合约的基本单位，类似于 Solidity 的 Contract："
      },
      "types": {
        "title": "状态变量",
        "description": "状态变量存储在 UTXO 中，支持以下数据类型：",
        "basicTypes": {
          "title": "基本类型",
          "string": "字符串类型",
          "int": "整数类型",
          "bool": "布尔类型",
          "number": "数字类型"
        },
        "complexTypes": {
          "title": "复杂类型",
          "array": "数组类型",
          "map": "映射类型",
          "struct": "结构类型"
        }
      },
      "functions": {
        "title": "方法",
        "description": "方法是可执行的函数，可以修改状态、返回值或触发事件：",
        "basicMethods": {
          "title": "基本方法",
          "description": "基本方法示例"
        },
        "methodsWithReturn": {
          "title": "带返回值的方法",
          "description": "返回值的方法"
        },
        "methodsWithParams": {
          "title": "带参数的方法",
          "description": "接受参数的方法"
        },
        "controlStructures": {
          "title": "控制结构",
          "conditionalStatements": {
            "title": "条件语句",
            "description": "条件语句示例"
          },
          "loops": {
            "title": "循环",
            "description": "循环示例"
          }
        },
        "builtInFunctions": {
          "title": "内置函数",
          "description": "Cardity 为常见操作提供内置函数：",
          "commonFunctions": {
            "title": "常用函数",
            "now": "当前时间戳",
            "length": "字符串/数组长度",
            "push": "添加到数组",
            "pop": "从数组移除"
          },
          "usageExamples": {
            "title": "使用示例",
            "description": "内置函数的使用示例"
          }
        },
        "errorHandling": {
          "title": "错误处理",
          "description": "使用 return 语句进行条件检查和错误处理："
        },
        "abiGeneration": {
          "title": "ABI 生成",
          "description": "Cardity 自动从您的协议生成 ABI（应用程序二进制接口）：",
          "generateAbi": {
            "title": "生成 ABI",
            "description": "从 .car 文件生成 ABI"
          },
          "generatedAbiExample": {
            "title": "生成的 ABI 示例",
            "description": "生成的 ABI 示例"
          },
          "cardityTest": {
            "title": "@cardity/test",
            "description": "Cardity 协议的测试框架，具有断言和模拟功能。",
            "features": {
              "title": "功能：",
              "unitTesting": "单元测试框架",
              "assertionFunctions": "断言函数",
              "mockStateEvents": "模拟状态和事件",
              "testCoverage": "测试覆盖率报告",
              "integrationTesting": "集成测试助手"
            }
          }
        }
      },
      "usage": {
        "importAndUse": "导入和使用",
        "drc20WithStandardLibrary": "使用标准库的 DRC-20",
        "registryFeatures": "注册表功能",
        "registryCommands": "注册表命令",
        "centralizedDiscovery": "集中式包发现",
        "versionManagement": "版本管理和语义版本控制",
        "dependencyResolution": "依赖项解析",
        "packageDocumentation": "包文档和示例",
        "communityRatings": "社区评分和评论",
        "securityScanning": "安全扫描和验证"
      }
    },
    "standardLibrary": {
      "title": "标准库",
      "subtitle": "Cardity 开发的内置函数和实用工具",
      "overview": {
        "title": "包管理",
        "description": "Cardity 提供了一个全面的包管理系统，用于共享和重用代码：",
        "packageConfiguration": {
          "title": "包配置",
          "description": "使用元数据和依赖项配置您的包"
        },
        "packageInstallation": {
          "title": "包安装",
          "description": "从注册表安装包"
        },
        "packagePublishing": {
          "title": "包发布",
          "description": "将您的包发布到注册表"
        },
        "packageCommands": {
          "title": "包命令",
          "description": "常用的包管理命令"
        },
        "standardPackages": {
          "title": "标准包",
          "description": "可用的标准包",
          "cardityStandard": {
            "title": "@cardity/standard",
            "description": "核心标准库，为 Cardity 开发提供基本实用工具和数据结构。",
            "features": {
              "title": "功能：",
              "dataStructures": "数据结构（数组、映射、集合）",
              "stringManipulation": "字符串操作实用工具",
              "mathOperations": "数学和数字运算",
              "timeFunctions": "时间和日期函数",
              "validationHelpers": "验证助手"
            }
          },
          "cardityUtils": {
            "title": "@cardity/utils",
            "description": "用于常见开发任务和辅助方法的实用函数。",
            "features": {
              "title": "功能：",
              "addressValidation": "地址验证和格式化",
              "hashEncryption": "哈希和加密实用工具",
              "jsonManipulation": "JSON 解析和操作",
              "errorHandling": "错误处理助手",
              "loggingDebugging": "日志记录和调试工具"
            }
          },
          "cardityDrc20": {
            "title": "@cardity/drc20",
            "description": "完整的 DRC-20 代币标准实现，包含部署和管理工具。",
            "features": {
              "title": "功能：",
              "tokenTemplates": "DRC-20 代币模板",
              "deploymentUtilities": "代币部署实用工具",
              "mintTransfer": "铸造和转账操作",
              "tokenValidation": "代币验证助手",
              "eventEmission": "代币事件发射"
            }
          },
          "cardityTest": {
            "title": "@cardity/test",
            "description": "Cardity 协议的测试框架，具有断言和模拟功能。",
            "features": {
              "title": "功能：",
              "unitTesting": "单元测试框架",
              "assertionFunctions": "断言函数",
              "mockStateEvents": "模拟状态和事件",
              "testCoverage": "测试覆盖率报告",
              "integrationTesting": "集成测试助手"
            }
          }
        }
      },
      "usage": {
        "importAndUse": "导入和使用",
        "drc20WithStandardLibrary": "使用标准库的 DRC-20",
        "registryFeatures": "注册表功能",
        "registryCommands": "注册表命令",
        "centralizedDiscovery": "集中式包发现",
        "versionManagement": "版本管理和语义版本控制",
        "dependencyResolution": "依赖项解析",
        "packageDocumentation": "包文档和示例",
        "communityRatings": "社区评分和评论",
        "securityScanning": "安全扫描和验证",
        "code": {
          "importStandardLibrary": "// 导入标准库函数",
          "useBuiltInFunctions": "// 使用内置函数",
          "usingDrc20Library": "// 使用 DRC-20 标准库",
          "drc20Configuration": "// DRC-20 配置",
          "registryCommands": "// 注册表命令",
          "searchPackages": "// 搜索包",
          "installPackage": "// 安装包",
          "publishPackage": "// 发布包",
          "viewPackageInfo": "// 查看包信息"
        }
      },
      "nextSteps": {
        "title": "下一步",
        "description": "现在您已经了解了标准库，您可以：",
        "learnDeployment": "学习部署策略",
        "exploreAdvancedTechniques": "探索高级开发技术",
        "createPublishPackages": "创建和发布您自己的包"
      },
      "functions": {
        "title": "内置函数",
        "description": "可用的标准库函数",
        "timeFunctions": {
          "title": "时间函数",
          "now": "当前时间戳",
          "time": "当前时间（秒）",
          "date": "当前日期字符串"
        },
        "arrayFunctions": {
          "title": "数组函数",
          "length": "获取数组长度",
          "push": "向数组添加元素",
          "pop": "移除最后一个元素",
          "splice": "移除元素"
        },
        "stringFunctions": {
          "title": "字符串函数",
          "length": "字符串长度",
          "substring": "提取子字符串",
          "toLowerCase": "转换为小写",
          "toUpperCase": "转换为大写"
        },
        "mathFunctions": {
          "title": "数学函数",
          "abs": "绝对值",
          "min": "最小值",
          "max": "最大值",
          "sqrt": "平方根"
        }
      }
    },
    "deploy": {
      "title": "部署指南",
      "subtitle": "了解如何将您的 Cardity 智能协议部署到 Dogecoin 区块链",
      "overview": {
        "title": "部署概述",
        "description": "Cardity 支持将智能协议部署到 Dogecoin 区块链，使用基于 UTXO 的存储。您的协议被编译为二进制格式并存储在 OP_RETURN 输出中或作为铭文。"
      },
      "methods": {
        "title": "部署方法",
        "opReturn": {
          "title": "UTXO 存储",
          "description": "协议存储在 Dogecoin UTXO 输出中，实现永久链上存储"
        },
        "inscription": {
          "title": "二进制格式",
          "description": ".carc 文件包含优化的二进制数据，用于高效的区块链存储"
        }
      },
      "steps": {
        "title": "部署步骤",
        "compile": {
          "title": "编译过程",
          "description": "将您的 .car 文件编译为 .carc 格式"
        },
        "validate": {
          "title": "部署前验证",
          "description": "验证编译后的协议"
        },
        "deploy": {
          "title": "DRC-20 代币部署",
          "description": "部署到 Dogecoin 区块链"
        }
      },
      "code": {
        "compileCommands": {
          "title": "编译命令",
          "compileToBinary": "# 将 .car 文件编译为 .carc 二进制格式",
          "compileWithOptimization": "# 使用优化编译",
          "compileWithOutput": "# 使用特定输出编译",
          "validateCompilation": "# 验证编译"
        },
        "binaryStructure": {
          "title": "二进制文件结构",
          "description": ".carc 文件包含：",
          "protocolMetadata": "// - 协议元数据（名称、版本、所有者）",
          "stateVariables": "// - 状态变量定义",
          "methodBytecode": "// - 方法字节码",
          "eventDefinitions": "// - 事件定义",
          "abiInformation": "// - ABI 信息"
        },
        "deploymentCommands": {
          "title": "部署命令",
          "validateFile": "# 验证 .carc 文件",
          "viewInfo": "# 查看协议信息",
          "deployToChain": "# 部署到 Dogecoin 链",
          "createInscription": "# 创建铭文交易",
          "viewProtocolInfo": "# 查看协议信息",
          "checkDeploymentStatus": "# 检查部署状态",
          "validateWithVerbose": "# 使用详细输出验证",
          "deployWithCustomFee": "# 使用自定义费用部署",
          "deployToTestnet": "# 部署到测试网",
          "deployWithMetadata": "# 使用元数据部署",
          "createInscriptionWithMetadata": "# 使用元数据创建铭文",
          "viewInscriptionDetails": "# 查看铭文详情",
          "deployInscription": "# 部署铭文"
        },
        "validationChecks": {
          "title": "验证检查",
          "protocolStructure": "• 协议结构验证",
          "stateVariableType": "• 状态变量类型检查",
          "methodSyntax": "• 方法语法验证",
          "eventDefinition": "• 事件定义验证",
          "abiGeneration": "• ABI 生成验证",
          "sizeOptimization": "• 大小和优化检查"
        },
        "drc20Deployment": {
          "title": "DRC-20 代币部署",
          "createTokenDefinition": "# 1. 创建 DRC-20 代币定义",
          "compileToken": "# 2. 编译代币",
          "deployToken": "# 3. 部署代币",
          "mintInitialSupply": "# 4. 铸造初始供应量"
        }
      },
      "nextSteps": {
        "title": "下一步",
        "description": "现在您已经了解了部署，您可以：",
        "learnAdvancedTechniques": "学习高级开发技术",
        "exploreTestingDebugging": "探索测试和调试策略",
        "contributeEcosystem": "为 Cardity 生态系统做出贡献"
      },
      "troubleshooting": {
        "title": "故障排除",
        "commonIssues": "常见问题",
        "compilationErrors": "编译错误",
        "deploymentFailures": "部署失败",
        "documentation": "文档",
        "documentAllMethods": "• 记录所有公共方法",
        "provideUsageExamples": "• 提供使用示例",
        "includeDeploymentInstructions": "• 包含部署说明",
        "maintainChangelog": "• 维护更新日志",
        "createUserGuides": "• 创建用户指南"
      }
    },
    "developerGuide": {
      "title": "开发者指南",
      "subtitle": "高级开发技术和最佳实践",
      "overview": {
        "title": "开发环境",
        "description": "高级开发技术和模式",
        "systemRequirements": {
          "title": "系统要求",
          "operatingSystem": "操作系统",
          "memory": "内存",
          "storage": "存储",
          "network": "网络",
          "osValue": "macOS、Linux 或 Windows",
          "memoryValue": "最少 4GB RAM，推荐 8GB",
          "storageValue": "2GB 可用空间",
          "networkValue": "用于包下载的互联网连接"
        },
        "requiredDependencies": {
          "title": "必需依赖项",
          "description": "安装必需的系统依赖项"
        },
        "buildFromSource": {
          "title": "从源码构建",
          "description": "从源码构建 Cardity"
        },
        "projectStructure": {
          "title": "项目结构",
          "description": "了解 Cardity 核心架构",
          "cardityCoreArchitecture": {
            "title": "Cardity 核心架构",
            "description": "核心代码库结构概述"
          }
        }
      },
      "bestPractices": {
        "title": "性能优化",
        "description": "推荐的开发实践",
        "protocolOptimization": {
          "title": "协议优化",
          "minimizeStateVariables": "最小化状态变量",
          "efficientDataStructures": "高效数据结构",
          "optimizeMethods": "优化方法",
          "batchOperations": "批量操作",
          "lazyLoading": "懒加载",
          "minimizeStateVariablesDesc": "仅存储必要数据",
          "efficientDataStructuresDesc": "为您的用例使用适当的类型",
          "optimizeMethodsDesc": "减少计算复杂度",
          "batchOperationsDesc": "将相关操作分组",
          "lazyLoadingDesc": "仅在需要时初始化数据"
        },
        "compilationOptimization": {
          "title": "编译优化",
          "description": "优化编译设置"
        },
        "packageDevelopment": {
          "title": "包开发",
          "description": "包开发和管理",
          "creatingPackages": {
            "title": "创建包",
            "description": "创建和构建包"
          },
          "packageConfiguration": {
            "title": "包配置",
            "description": "配置包元数据和依赖项"
          }
        },
        "errorHandling": {
          "title": "错误处理",
          "description": "常见错误模式和解决方案",
          "syntaxErrors": "语法错误",
          "typeErrors": "类型错误",
          "stateAccessErrors": "状态访问错误",
          "eventEmissionErrors": "事件发射错误"
        }
      },
      "testing": {
        "title": "测试策略",
        "description": "测试策略和工具"
      },
      "code": {
        "macosInstall": "# macOS (使用 Homebrew)",
        "ubuntuInstall": "# Ubuntu/Debian",
        "centosInstall": "# CentOS/RHEL",
        "windowsInstall": "# Windows (使用 vcpkg)",
        "cloneRepository": "# 克隆仓库",
        "createBuildDir": "# 创建构建目录",
        "configureCmake": "# 使用 CMake 配置",
        "buildProject": "# 构建项目",
        "installSystem": "# 安装到系统",
        "verifyInstall": "# 验证安装",
        "projectStructure": "cardity_core/",
        "compilerDir": "├── compiler/             # 编译器源码",
        "lexerFile": "│   ├── lexer.cpp        # 词法分析器",
        "parserFile": "│   ├── parser.cpp       # 语法解析器",
        "semanticFile": "│   ├── semantic.cpp     # 语义分析",
        "typeSystemFile": "│   ├── type_system.cpp  # 类型检查",
        "runtimeFile": "│   ├── runtime.cpp      # 运行时执行",
        "carGeneratorFile": "│   ├── car_generator.cpp # CAR 格式生成器",
        "carcGeneratorFile": "│   ├── carc_generator.cpp # CARC 二进制生成器",
        "carDeployerFile": "│   ├── car_deployer.cpp # 部署工具",
        "dogecoinDeployerFile": "│   ├── dogecoin_deployer.cpp # Dogecoin 集成",
        "drc20StandardFile": "│   ├── drc20_standard.cpp # DRC-20 标准",
        "drc20CompilerFile": "│   ├── drc20_compiler.cpp # DRC-20 编译器",
        "drc20CliFile": "│   ├── drc20_cli.cpp    # DRC-20 CLI 工具",
        "eventSystemFile": "│   └── event_system.cpp # 事件处理",
        "packageManagerFile": "├── package_manager.cpp   # 包管理",
        "packageConfigFile": "├── package_config.cpp    # 配置管理",
        "packageBuilderFile": "├── package_builder.cpp   # 构建系统",
        "registryClientFile": "├── registry_client.cpp   # 注册表集成",
        "cardityCliFile": "├── cardity_cli.cpp      # 主 CLI 接口",
        "examplesDir": "├── examples/            # 示例项目",
        "docsDir": "├── docs/                # 文档",
        "cmakeListsFile": "└── CMakeLists.txt       # 构建配置",
        "unitTesting": {
          "title": "单元测试",
          "runAllTests": "# 运行所有测试",
          "runSpecificTests": "# 运行特定测试套件",
          "runWithCoverage": "# 运行覆盖率测试",
          "runVerboseTests": "# 运行详细输出测试"
        },
        "protocolTesting": {
          "title": "协议测试",
          "testCompilation": "# 测试协议编译",
          "testExecution": "# 测试协议执行",
          "testDrc20Token": "# 测试 DRC-20 代币",
          "runIntegrationTests": "# 运行集成测试"
        }
      },
      "nextSteps": {
        "title": "下一步",
        "description": "现在您已经熟悉了高级开发技术，您可以：",
        "contributeCore": "为 Cardity 核心项目做出贡献",
        "createPackages": "创建和发布您自己的包",
        "buildApplications": "使用 Cardity 构建复杂应用程序"
      },
      "resources": {
        "title": "资源",
        "documentation": "文档",
        "community": "社区",
        "gettingStartedGuide": "入门指南",
        "languageReference": "语言参考",
        "standardLibrary": "标准库",
        "cliTools": "CLI 工具",
        "deploymentGuide": "部署指南",
        "githubRepository": "GitHub 仓库",
        "discordCommunity": "Discord 社区",
        "developerForum": "开发者论坛",
        "emailSupport": "邮件支持"
      }
    },
    "learningPath": {
      "title": "学习路径",
      "description": "按照我们推荐的学习路径掌握 Cardity 开发",
      "steps": [
        {
          "title": "安装",
          "description": "设置您的开发环境"
        },
        {
          "title": "第一个协议",
          "description": "编写和部署您的第一个协议"
        },
        {
          "title": "语言功能",
          "description": "学习 Cardity 语法和功能"
        },
        {
          "title": "DRC-20 代币",
          "description": "构建符合 DRC-20 标准的代币"
        },
        {
          "title": "高级模式",
          "description": "掌握高级开发模式"
        }
      ]
    }
  },
  "examples": {
    "title": "示例",
    "subtitle": "通过实际示例和真实用例学习 Cardity",
    "hero": {
      "title": "代码示例",
      "subtitle": "探索真实世界的智能协议示例并学习 Cardity 编程模式",
      "description": "从简单的 Hello World 到复杂的 DRC-20 代币，发现如何构建强大的智能协议"
    },
    "pageTitle": "Cardity 示例",
    "pageSubtitle": "通过实际示例学习 Cardity，从基础协议到高级 DRC-20 代币和治理系统",
    "categories": {
      "basic": "基础",
      "intermediate": "中级",
      "advanced": "高级",
      "token": "代币",
      "wallet": "钱包",
      "governance": "治理"
    },
    "difficulty": {
      "beginner": "初学者",
      "intermediate": "中级",
      "advanced": "高级"
    },
    "examples": [
      {
        "title": "Hello World",
        "description": "演示基本 Cardity 语法和结构的简单协议",
        "category": "基础",
        "difficulty": "初学者"
      },
      {
        "title": "计数器协议",
        "description": "可以递增和递减的简单计数器",
        "category": "基础",
        "difficulty": "初学者"
      },
      {
        "title": "DRC-20 代币",
        "description": "具有铸造和转账功能的完整 DRC-20 代币实现",
        "category": "代币",
        "difficulty": "中级"
      },
      {
        "title": "简单钱包",
        "description": "用于管理 Dogecoin 余额的基础钱包协议",
        "category": "钱包",
        "difficulty": "中级"
      },
      {
        "title": "投票系统",
        "description": "具有提案创建和投票功能的去中心化投票系统",
        "category": "治理",
        "difficulty": "高级"
      },
      {
        "title": "事件系统演示",
        "description": "演示高级事件处理和状态管理",
        "category": "高级",
        "difficulty": "高级"
      }
    ],
    "actions": {
      "viewDetails": "查看详情",
      "runExample": "运行示例",
      "downloadCode": "下载代码",
      "submitExample": "提交示例",
      "startCoding": "开始编码"
    },
    "contribute": {
      "title": "想要贡献示例？",
      "description": "我们欢迎高质量的示例代码社区贡献。您的示例可以帮助其他开发者更好地理解和使用 Cardity。",
      "submitExample": "提交示例",
      "startCoding": "开始编码"
    },
    "comingSoon": {
      "title": "示例即将推出",
      "description": "我们正在准备最新的 Cardity 代码示例，敬请期待！"
    }
  },
  "download": {
    "title": "下载 Cardity",
    "subtitle": "获取最新的 Cardity 工具、示例和开发套件，开始在 Dogecoin 上构建智能协议",
    "quickStart": {
      "title": "快速开始",
      "description": "选择您的平台，几分钟内开始使用 Cardity",
      "downloadFor": "下载适用于",
      "orInstallVia": "或通过包管理器安装：",
      "homebrewCommand": "brew install cardity"
    },
    "downloadOptions": {
      "cliTools": {
        "title": "CLI 工具",
        "description": "Cardity 开发的完整命令行界面"
      },
      "exampleProjects": {
        "title": "示例项目",
        "description": "即用型示例项目和模板"
      },
      "developmentKit": {
        "title": "开发套件",
        "description": "完整的开发环境设置"
      }
    },
    "tools": {
      "cardity": {
        "name": "cardity",
        "description": "项目管理的主要 CLI 工具",
        "version": "0.1.0",
        "size": "2.1 MB"
      },
      "cardityc": {
        "name": "cardityc",
        "description": ".car 文件编译器",
        "version": "0.1.0",
        "size": "1.8 MB"
      },
      "cardityRuntime": {
        "name": "cardity_runtime",
        "description": "运行时执行引擎",
        "version": "0.1.0",
        "size": "2.3 MB"
      },
      "cardityDrc20": {
        "name": "cardity_drc20",
        "description": "DRC-20 代币管理工具",
        "version": "0.1.0",
        "size": "1.5 MB"
      },
      "cardityAbi": {
        "name": "cardity_abi",
        "description": "ABI 生成器",
        "version": "0.1.0",
        "size": "1.2 MB"
      },
      "cardityDeploy": {
        "name": "cardity_deploy",
        "description": "部署工具",
        "version": "0.1.0",
        "size": "2.0 MB"
      }
    },
    "examples": {
      "helloWorld": {
        "name": "Hello World",
        "description": "简单的 Hello World 协议",
        "version": "1.0.0",
        "size": "2 KB"
      },
      "counterProtocol": {
        "name": "计数器协议",
        "description": "具有递增/递减功能的基础计数器",
        "version": "1.0.0",
        "size": "3 KB"
      },
      "walletProtocol": {
        "name": "钱包协议",
        "description": "具有存款/取款功能的简单钱包",
        "version": "1.0.0",
        "size": "5 KB"
      },
      "drc20Token": {
        "name": "DRC-20 代币",
        "description": "完整的 DRC-20 代币实现",
        "version": "1.0.0",
        "size": "8 KB"
      },
      "eventDemo": {
        "name": "事件演示",
        "description": "事件系统演示",
        "version": "1.0.0",
        "size": "4 KB"
      },
      "votingSystem": {
        "name": "投票系统",
        "description": "去中心化投票协议",
        "version": "1.0.0",
        "size": "6 KB"
      }
    },
    "devKit": {
      "cardityDevKit": {
        "name": "Cardity 开发套件",
        "description": "完整的开发工具包",
        "version": "0.1.0",
        "size": "15 MB"
      },
      "vsCodeExtension": {
        "name": "VS Code 扩展",
        "description": "VS Code 的 Cardity 语言支持",
        "version": "0.1.0",
        "size": "500 KB"
      },
      "projectTemplates": {
        "name": "项目模板",
        "description": "启动项目模板",
        "version": "1.0.0",
        "size": "2 MB"
      }
    },
    "platforms": {
      "macOS": "macOS",
      "linux": "Linux",
      "windows": "Windows",
      "architecturesLabel": "架构：",
      "packageManagersLabel": "包管理器：",
      "download": "下载",
      "architectures": {
        "intelX64": "Intel x64",
        "appleSilicon": "Apple Silicon",
        "x64": "x64",
        "arm64": "ARM64"
      },
      "packageManagers": {
        "homebrew": "Homebrew",
        "apt": "APT",
        "yum": "YUM",
        "chocolatey": "Chocolatey",
        "directDownload": "直接下载"
      },
      "allPlatforms": "所有平台",
      "sourceCode": "源代码",
      "vsCode": "VS Code"
    },
    "installation": {
      "title": "安装说明",
      "fromSource": {
        "title": "从源码安装",
        "commands": "# 克隆仓库\ngit clone https://github.com/cardity-org/cardity-core.git\ncd cardity-core\n\n# 安装依赖\nbrew install cmake nlohmann-json curl libarchive openssl\n\n# 构建和安装\nmkdir build && cd build\ncmake ..\nmake -j4\nsudo make install\n\n# 验证安装\ncardity --version"
      },
      "usingPackageManager": {
        "title": "使用包管理器",
        "commands": "# macOS (Homebrew)\nbrew install cardity\n\n# Ubuntu/Debian\nsudo apt-get install cardity\n\n# Windows (Chocolatey)\nchoco install cardity\n\n# 验证安装\ncardity --version"
      }
    },
    "systemRequirements": {
      "title": "系统要求",
      "storage": {
        "title": "存储",
        "description": "安装和开发至少需要 2GB 可用空间"
      },
      "memory": {
        "title": "内存",
        "description": "最少 4GB RAM，开发推荐 8GB"
      },
      "network": {
        "title": "网络",
        "description": "用于包下载和更新的互联网连接"
      }
    },
    "openSource": {
      "title": "开源",
      "description": "Cardity 完全开源。查看源代码、贡献或从源码构建。",
      "viewOnGithub": "在 GitHub 上查看",
      "buildFromSource": "从源码构建"
    },
    "support": {
      "title": "需要帮助？",
      "description": "安装或设置遇到问题？我们随时为您提供帮助。",
      "documentation": {
        "title": "文档",
        "description": "全面的指南和教程"
      },
      "reportIssues": {
        "title": "报告问题",
        "description": "发现错误？在 GitHub 上报告"
      },
      "contactUs": {
        "title": "联系我们",
        "description": "获取支持"
      }
    },
    "common": {
      "version": "版本：",
      "size": "大小：",
      "platform": "平台：",
      "download": "下载"
    }
  },
  "about": {
    "title": "关于 Cardity",
    "subtitle": "Cardity Core - 完整的智能协议编程语言实现，专为 Dogecoin UTXO 设计",
    "overview": {
      "title": "项目概述",
      "description": "Cardity Core 是 Cardity 编程语言的完整实现，提供：",
      "features": [
        "编译器 - 将编程语言格式的 .car 文件编译为可执行格式",
        "运行时 - 执行编译后的协议",
        "包管理器 - 管理依赖和发布包",
        "CLI 工具 - 命令行开发工具",
        "类型系统 - 静态类型检查",
        "事件系统 - 事件驱动架构",
        "ABI 生成器 - 自动生成协议接口（支持编程语言格式和 JSON 格式）",
        "区块链部署 - 支持 Dogecoin 链上部署",
        "DRC-20 代币标准 - 完整的 DRC-20 代币支持"
      ]
    },
    "version": {
      "title": "版本信息",
      "npmPackage": {
        "title": "npm 包信息",
        "packageName": "包名称",
        "currentVersion": "当前版本",
        "license": "许可证",
        "packageSize": "包大小",
        "fileCount": "文件数量"
      },
      "github": {
        "title": "GitHub 仓库",
        "repository": "仓库",
        "homepage": "主页",
        "npmPage": "npm 页面"
      }
    },
    "features": {
      "title": "核心功能",
      "languageFormat": {
        "title": "编程语言格式",
        "description": "Cardity 支持具有类似 Solidity 语法的编程语言格式 .car 文件，包括：",
        "items": [
          "协议定义 (protocol)",
          "状态变量 (state)",
          "事件系统 (event)",
          "方法定义 (method)",
          "类型系统 (string, int, bool)",
          "事件发射 (emit)"
        ]
      },
      "drc20": {
        "title": "DRC-20 代币标准",
        "description": "完整的 DRC-20 代币标准支持，包括：",
        "items": [
          "代币定义 (drc20 block)",
          "部署方法 (deploy)",
          "铸造方法 (mint)",
          "转账方法 (transfer)",
          "事件定义 (TokenDeployed, TokenMinted, TokenTransferred)",
          "自动 ABI 生成"
        ]
      },
      "blockchain": {
        "title": "区块链部署",
        "description": "支持多种部署方法：",
        "items": [
          ".carc 二进制格式",
          "OP_RETURN 部署",
          "铭文部署 (ordinals 协议)",
          "Dogecoin 链上部署",
          "协议验证和查看"
        ]
      },
      "devTools": {
        "title": "开发工具",
        "description": "完整的开发工具链：",
        "items": [
          "CLI 命令行工具",
          "项目初始化",
          "编译和运行",
          "ABI 生成",
          "包管理",
          "调试和测试"
        ]
      }
    },
    "installation": {
      "title": "安装方法",
      "npm": {
        "title": "npm 安装（推荐）",
        "description": "通过 npm 包管理器一键安装，支持全局使用，自动依赖管理"
      },
      "sourceCode": {
        "title": "从源代码",
        "description": "从 GitHub 仓库克隆源代码，适合开发者自定义编译和贡献代码"
      }
    },
    "community": {
      "title": "社区和链接",
      "official": {
        "title": "官方资源",
        "github": "GitHub 仓库",
        "npm": "npm 包页面",
        "docs": "官方文档",
        "examples": "示例项目"
      },
      "social": {
        "title": "社交媒体",
        "twitter": "X",
        "discord": "Discord",
        "telegram": "Telegram"
      },
      "development": {
        "title": "开发",
        "issues": "报告问题",
        "contributing": "贡献指南",
        "roadmap": "开发路线图"
      }
    },
    "contributing": {
      "title": "贡献代码",
      "description": "欢迎贡献代码！Cardity 是一个开源项目，我们欢迎各种形式的贡献：",
      "steps": [
        "Fork 项目并创建功能分支",
        "提交您的更改",
        "推送到分支并创建 Pull Request",
        "报告错误和建议功能"
      ],
      "viewGitHub": "查看 GitHub",
      "devGuide": "开发指南"
    }
  },
  "footer": {
    "description": "Cardity 是一个静态类型编程语言，专为在 Dogecoin UTXO 上开发智能协议而设计",
    "links": {
      "docs": "文档",
      "examples": "示例",
      "download": "下载",
      "about": "关于",
      "blog": "博客"
    },
    "docs": {
      "gettingStarted": "快速开始",
      "cliReference": "CLI 参考",
      "deployment": "部署"
    },
    "examples": {
      "smartProtocols": "智能协议",
      "downloadExamples": "下载示例"
    },
    "community": {
      "title": "社区",
      "github": "GitHub",
      "twitter": "X",
      "discord": "Discord"
    },
    "legal": {
      "title": "法律",
      "privacy": "隐私政策",
      "terms": "服务条款",
      "license": "MIT 许可证"
    },
    "copyright": "© 2024 Cardity. 保留所有权利。"
  }
} 