{
  "cpl": {
    "methods": {
      "balance_of": {
        "logic": "state . total_supply = state . total_supply",
        "param_types": [
          ""
        ],
        "params": [
          "user"
        ],
        "returns": {
          "expr": "state . balances [ params . user ] ",
          "type": "int"
        }
      },
      "calc_fee": {
        "logic": "state . total_supply = state . total_supply",
        "param_types": [
          ""
        ],
        "params": [
          "amount"
        ],
        "returns": {
          "expr": "( params . amount * state . basis_points_rate ) / 10000 ",
          "type": "int"
        }
      },
      "freeze": {
        "logic": "state . frozen [ params . user ] = true",
        "param_types": [
          ""
        ],
        "params": [
          "user"
        ],
        "returns": {
          "expr": "ok ",
          "type": "string"
        }
      },
      "issue": {
        "logic": "state . _result = ok ; if ( params . amount <= 0 ) { state . _result = InvalidAmount } if ( state . total_supply + params . amount > state . max_supply ) { state . _result = ExceedsMaxSupply } if ( state . _result == ok ) { state . total_supply = state . total_supply + params . amount } if ( state . _result == ok ) { state . balances [ state . owner_addr ] = state . balances [ state . owner_addr ] + params . amount } if ( state . _result == ok ) { emit Issue ( state . owner_addr , params . amount , state . total_supply ) }",
        "param_types": [
          ""
        ],
        "params": [
          "amount"
        ],
        "returns": {
          "expr": "state . _result ",
          "type": "string"
        }
      },
      "pause": {
        "logic": "state . paused = true",
        "params": [],
        "returns": {
          "expr": "paused ",
          "type": "string"
        }
      },
      "set_fee_policy": {
        "logic": "state . basis_points_rate = params . bps ; state . maximum_fee = params . cap",
        "param_types": [
          "",
          ""
        ],
        "params": [
          "bps",
          "cap"
        ],
        "returns": {
          "expr": "ok ",
          "type": "string"
        }
      },
      "transfer": {
        "logic": "state . _result = ok ; if ( params . amount <= 0 ) { state . _result = InvalidAmount } if ( state . paused == true ) { state . _result = Paused } if ( params . amount > state . max_tx_amount ) { state . _result = ExceedsLimit } if ( state . frozen [ ctx . sender ] == true ) { state . _result = SenderFrozen } if ( state . frozen [ params . to ] == true ) { state . _result = RecipientFrozen } if ( state . balances [ ctx . sender ] < params . amount ) { state . _result = Insufficient } if ( state . _result == ok ) { state . _fee = params . amount } if ( state . _result == ok ) { state . _fee = state . _fee * state . basis_points_rate } if ( state . _result == ok ) { state . _fee = state . _fee / 10000 } if ( state . _result == ok ) { if ( state . _fee > state . maximum_fee ) { state . _fee = state . maximum_fee } } if ( state . _result == ok ) { state . _send = params . amount - state . _fee } if ( state . _result == ok ) { state . balances [ ctx . sender ] = state . balances [ ctx . sender ] - params . amount } if ( state . _result == ok ) { state . balances [ params . to ] = state . balances [ params . to ] + state . _send } if ( state . _result == ok ) { state . balances [ state . owner_addr ] = state . balances [ state . owner_addr ] + state . _fee } if ( state . _result == ok ) { emit Transfer ( ctx . sender , params . to , state . _send , state . _fee ) }",
        "param_types": [
          "",
          ""
        ],
        "params": [
          "to",
          "amount"
        ],
        "returns": {
          "expr": "state . _result ",
          "type": "string"
        }
      },
      "unfreeze": {
        "logic": "state . frozen [ params . user ] = false",
        "param_types": [
          ""
        ],
        "params": [
          "user"
        ],
        "returns": {
          "expr": "ok ",
          "type": "string"
        }
      },
      "unpause": {
        "logic": "state . paused = false",
        "params": [],
        "returns": {
          "expr": "unpaused ",
          "type": "string"
        }
      }
    },
    "owner": "doge1owner...",
    "state": {
      "_fee": {
        "default": "0",
        "type": "int"
      },
      "_result": {
        "default": "ok",
        "type": "string"
      },
      "_send": {
        "default": "0",
        "type": "int"
      },
      "balances_placeholder": {
        "default": "",
        "type": "string"
      },
      "basis_points_rate": {
        "default": "0",
        "type": "int"
      },
      "decimals": {
        "default": "6",
        "type": "int"
      },
      "frozen_placeholder": {
        "default": "",
        "type": "string"
      },
      "max_supply": {
        "default": "1000000000",
        "type": "int"
      },
      "max_tx_amount": {
        "default": "500000",
        "type": "int"
      },
      "maximum_fee": {
        "default": "0",
        "type": "int"
      },
      "name": {
        "default": "Tether USD",
        "type": "string"
      },
      "owner_addr": {
        "default": "doge1owner...",
        "type": "address"
      },
      "paused": {
        "default": "false",
        "type": "bool"
      },
      "symbol": {
        "default": "USDT",
        "type": "string"
      },
      "total_supply": {
        "default": "0",
        "type": "int"
      }
    }
  },
  "op": "deploy",
  "p": "cardinals",
  "protocol": "USDTLikeToken",
  "version": "1.0.0"
}
